{"name":"The-bson","tagline":"typeclass-based utility for encoding and decoding mongo db objects","body":"# the-bson\r\n\r\nthis library is an attempt to recreate some of the utilities of the (excellent) [Argonaut](http://argonaut.io/) library for manipulation Mongo DB objects;\r\nthe structure and interfaces of this library were made to be familiar to a user of Argonaut.\r\n(also various things, especially how to use SBT to generate a bunch of typeclass instance building methods, were figured out by looking at the prior library.)\r\nin particular, this library provides typeclasses for encoding and decoding DBObjects (and the fields of DBObjects).\r\n\r\n[API documentation for the latest version][api-docs] is available.\r\n\r\n## Installation\r\n(pending)\r\n\r\n## How to use\r\nThe entire functionality of the-bson can be imported in one go:\r\n```scala\r\nimport io.github.raptros.bson._\r\nimport Bson._\r\n```\r\n\r\nif you find this too cumbersome, functionality and implicits can also be imported in various objects, e.g.\r\n```scala\r\nimport io.github.raptros.bson._\r\nimport EncodeBsonField._ //imports implicits for encoding basic types as object fields\r\nimport EncodeBson._ //imports additional implicits and several methods for constructing EncodeBson instances using extraction functions and named fields\r\nimport DecodeBsonField._ //imports implicits for decoding basic types from DBObjects\r\nimport DecodeBson._ //imports additional implicit decoders, along with several methods for building DecodeBson instances by extracting named fields and applying constructor functions (or making tuples)\r\nimport Builders._ //imports implicit classes that give syntax for encoding entire objects or building DBObjects from key-value pairs\r\nimport Extractors._ //imports implicit classes that wrap DBObjects to allow you to decode entire objects or decode particular fields\r\n```\r\n\r\n\r\n### Field encoding\r\ninstances of the trait [EncodeBsonField][] are used to write key-value pairs to DBObjects.\r\nfor instance, one of the provided definition in [EncodeBsonFields][] is:\r\n```scala\r\nimplicit val intEncodeField: EncodeBsonField[Int] = directWritable[Int]\r\n```\r\nyou could use this like so:\r\n```scala\r\nval dbo = new BasicDBObject() //from the mongo-java-driver\r\nimplicitly[EncodeBsonField[Int]].writeTo(dbo, \"someKey\", 35)\r\n```\r\nthough, as the next section describes, there are easier ways.\r\n\r\n\r\n### Building DBObjects\r\nthis library provides several methods for building DBObject from key-value pairs in the [Builders][] trait.\r\nthese methods rely on having [EncodeBsonField][] instances available for the value types.\r\n\r\nthe two important items provided are [DBOKV][] and [StringToDBOKV][]:\r\n```scala\r\nval dbo = new BasicDBObject() //from the mongo-java-driver\r\nval kv = \"keyname\" :> 25 //produces DBOKV[Int](\"keyname\", 25)\r\nkv.write(dbo) //writes 25 into db at the key \"keyname\"\r\n```\r\nnote that `:>` only produces a [DBOKV][] if an implicit [EncodeBsonField][] can be found for the type of the argument.\r\n\r\nthere are two different ways to write optional values.\r\n\r\n* the first way relies on the instance for `EncodeBsonField[Option[A]]` in [EncodeBsonFields][]\r\n    ```scala\r\n    val kv1 = \"keyname1\" :> Some(25) // produces DBOKV[Option[Int]](\"keyname1\", Some(25))\r\n    val kv2 = \"keyname2\" :> (None: Option[Int]) // produces DBOKV[Option[Int]](\"keyname2\", None)\r\n    //if you write them ...\r\n    val dbo = new BasicDBObject() //from the mongo-java-driver\r\n    kv1.write(dbo) //writes 25 into dbo at key \"keyname1\"\r\n    kv2.write(dbo) //does not write into dbo\r\n    ```\r\n\r\n* the second uses a method in [StringToDBOKV][] and uses the encoder for A directly:\r\n    ```scala\r\n    val kv1 = \"keyname1\" :?> Some(25) //produces Some(DBOKV[Int](\"keyname1\", 25))\r\n    val kv2 = \"keyname2 :?> None // produces None\r\n    ```\r\n    the utility of this method will be explained later\r\n\r\nthere are two ways to use these [DBOKV][]s:\r\n\r\n* you can use the [DBO][] object and the apply method it contains:\r\n    ```scala\r\n    val dbo = DBO(\"key1\" :> 33, \"key2\" :> \"another value\", \"booleanKey\" :> true)\r\n    ```\r\n\r\n* you can use the methods provided by [DBOBuilder][], an implicit class which wraps around DBObjects:\r\n    ```scala\r\n    val dbo = DBO.empty //this just creates a new DBObject\r\n    dbo +@+ (\"key1\" :> 33) //the method +@+ writes the DBOKV into dbo and then returns dbo; this permits chaining\r\n    dbo +@+ (\"bool1\" :> true) +@+ (\"bool2\" :> false)\r\n    //you can also append a sequenece of keys using the ++@++ method\r\n    dbo ++@++ Seq(\"k3\" :> \"a string\", \"k4\" :> 3.14)\r\n    //there is a method +?+ which takes an Optional[DBOKV], writes it it is Some, and returns the dbo either way\r\n    dbo +?+ (\"optionWritten\" :?> Some(55)) +?+ \"(optionNotWritten\" :?> None) +@+ (\"alwaysWritten\" :> true)\r\n    //finally, there is a Unitary write method.\r\n    dbo.write(\"datetime\", DateTime.now()) //using the joda-time DateTime\r\n    ```\r\n    note that all of these methods mutate dbo! this means they should be used with caution. in fact, it might be best not to allow DBOBjects to leak out of the scope they are instantiated in.\r\n\r\n### Encoding\r\nyou can encode entire objects by defining instances of [EncodeBson][]\r\n```scala\r\n//a junk trait\r\ntrait Junk {\r\n  val x: Int\r\n  val y: String\r\n}\r\n//define an encoder using the apply method in the EncodeBson object.\r\nimplicit def junkEncodeBson: EncodeBson[Junk] = EncodeBson { j =>\r\n  DBO(\"x\" :> j.x, \"y\" :> j.y)\r\n}\r\nval junk1 = new Junk {\r\n  val x = 133\r\n  val y = \"some stuff\"\r\n}\r\nval dbo: DBObject = junkEncodeBson(junk1) //more explicitly: junkEncodeBson.encode(junk1)\r\n```\r\n\r\nalternatively, using an implicit class in [Builders][] that has so far gone unmentioned - [ValueToBson][], you could replace the last line there with\r\n```scala\r\nval dbo: DBObject = junk1.asBson //asBson looks for an implicit encoder instance for the wrapped type, and uses its encode method\r\n```\r\n\r\nif you have an [EncodeBson][] trait for some type, it can also be used whenever an [EncodeBsonField][] is needed.\r\n```scala\r\n//let's say we have the same Junk trait, junkEncodeBson definition, and junk1 value\r\nval dbo: DBObject = DBO(\"isJunk\" :> true, \"junk1\" :> junk1)\r\n```\r\n\r\nyou could replace the definition of junkEncodeBson using one of the bencode methods defined via [EncodeBsons][].\r\n```scala\r\nimplicit def junkEncodeBson: EncodeBson[Junk] = bencode2f((j: Junk) => (j.x, j.y))(\"x\", \"y\")\r\n```\r\n\r\n### Decoding Fields\r\n\r\n### Decoding\r\n\r\n### Codecs\r\n\r\n### Using the macros\r\n\r\n\r\n[api-docs]: http://raptros.github.io/the-bson/latest/api/#io.github.raptros.bson.package \r\n[Builders]: http://raptros.github.io/the-bson/latest/api/#io.github.raptros.bson.Builders\r\n[DBO]: http://raptros.github.io/the-bson/latest/api/#io.github.raptros.bson.Builders$DBO$\r\n[DBOKV]: http://raptros.github.io/the-bson/latest/api/#io.github.raptros.bson.Builders$DBO\r\n[StringToDBOKV]: http://raptros.github.io/the-bson/latest/api/#io.github.raptros.bson.Builders$StringToDBOKV\r\n[DBOBuilder]: http://raptros.github.io/the-bson/latest/api/#io.github.raptros.bson.Builders$DBOBuilder\r\n[ValueToBson]: http://raptros.github.io/the-bson/latest/api/#io.github.raptros.bson.Builders$ValueToBson\r\n[EncodeBson]: http://raptros.github.io/the-bson/latest/api/#io.github.raptros.bson.EncodeBson\r\n[EncodeBsons]: http://raptros.github.io/the-bson/latest/api/#io.github.raptros.bson.EncodeBsons\r\n[EncodeBsonField]: http://raptros.github.io/the-bson/latest/api/#io.github.raptros.bson.EncodeBsonField\r\n[EncodeBsonFields]: http://raptros.github.io/the-bson/latest/api/#io.github.raptros.bson.EncodeBsonFields\r\n[DecodeBson]: http://raptros.github.io/the-bson/latest/api/#io.github.raptros.bson.DecodeBson\r\n[DecodeBsons]: http://raptros.github.io/the-bson/latest/api/#io.github.raptros.bson.DecodeBsons\r\n[DecodeBsonField]: http://raptros.github.io/the-bson/latest/api/#io.github.raptros.bson.DecodeBsonField\r\n[DecodeBsonFields]: http://raptros.github.io/the-bson/latest/api/#io.github.raptros.bson.DecodeBsonFields\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}